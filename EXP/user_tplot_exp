"""
Plot results of a particle tracking experiment.
"""
# Import packages - add mpl.set_backend() right after plt.close()?
import matplotlib
from matplotlib import pyplot as plt

import xarray as xr
import numpy as np

from lo_tools import Lfun
from lo_tools import plotting_functions as pfun
Ldir = Lfun.Lstart()
#


# Choose an experiment and release to plot.
in_dir0 = Ldir['LOo'] / 'tracks'
exp_name = Lfun.choose_item(in_dir0, tag='', exclude_tag='.csv',
    itext='** Choose experiment from list **', last=False)
rel = Lfun.choose_item(in_dir0 / exp_name, tag='.nc', exclude_tag='grid',
    itext='** Choose item from list **', last=False)

in_dir02 = Ldir['LOo'] / 'tracks'
exp_name2 = Lfun.choose_item(in_dir02, tag='', exclude_tag='.csv',
    itext='** Choose experiment from list **', last=False)
rel2 = Lfun.choose_item(in_dir02 / exp_name2, tag='.nc', exclude_tag='grid',
    itext='** Choose item from list **', last=False)
#

# get Datasets
fn = in_dir0 / exp_name / rel
fng = in_dir0 / exp_name / 'grid.nc'
dsr = xr.open_dataset(fn, decode_times=False)
dsg = xr.open_dataset(fng)

fn2 = in_dir02 / exp_name2 / rel2
fng2 = in_dir02 / exp_name2 / 'grid.nc'
dsr2 = xr.open_dataset(fn2, decode_times=False)
dsg2 = xr.open_dataset(fng2)

NT, NP = dsr.lon.shape
NT2, NP2 = dsr2.lon.shape
#

# get a list of datetimes
ot_vec = dsr.ot.values
dt_list = [Lfun.modtime_to_datetime(ot) for ot in ot_vec]

ot_vec2 = dsr2.ot.values
dt_list2 = [Lfun.modtime_to_datetime(ot) for ot in ot_vec2]
#

# gather some fields, for convenience
lonp, latp = pfun.get_plon_plat(dsg.lon_rho.values, dsg.lat_rho.values)
hh = dsg.h.values
maskr = dsg.mask_rho.values

lonp2, latp2 = pfun.get_plon_plat(dsg2.lon_rho.values, dsg2.lat_rho.values)
hh2 = dsg2.h.values
maskr2 = dsg2.mask_rho.values
#

# subsample output for plotting
npmax = 1000 # max number of points to plot
step = max(1,int(np.floor(NP/npmax)))

step2 = max(1,int(np.floor(NP2/npmax)))

lon = dsr.lon.values[:,::step]
lat = dsr.lat.values[:,::step]

lon2 = dsr2.lon.values[:,::step2]
lat2 = dsr2.lat.values[:,::step2]
#

# make a mask that is False from the time a particle first leaves the domain
# and onwards
AA = [dsg.lon_rho.values[0,0], dsg.lon_rho.values[0,-1],
        dsg.lat_rho.values[0,0], dsg.lat_rho.values[-1,0]]
ib_mask = np.ones(lon.shape, dtype=bool)
ib_mask[lon < AA[0]] = False
ib_mask[lon > AA[1]] = False
ib_mask[lat < AA[2]] = False
ib_mask[lat > AA[3]] = False
NTS, NPS = lon.shape
for pp in range(NPS):
    tt = np.argwhere(ib_mask[:,pp]==False)
    if len(tt) > 0:
        ib_mask[tt[0][0]:, pp] = False

AA2 = [dsg2.lon_rho.values[0,0], dsg2.lon_rho.values[0,-1],
        dsg2.lat_rho.values[0,0], dsg2.lat_rho.values[-1,0]]
ib_mask2 = np.ones(lon2.shape, dtype=bool)
ib_mask2[lon2 < AA2[0]] = False
ib_mask2[lon2 > AA2[1]] = False
ib_mask2[lat2 < AA2[2]] = False
ib_mask2[lat2 > AA2[3]] = False
NTS2, NPS2 = lon2.shape
for pp in range(NPS2):
    tt2 = np.argwhere(ib_mask2[:,pp]==False)
    if len(tt2) > 0:
        ib_mask2[tt2[0][0]:, pp] = False
#

# and apply the mask to lon and lat
lon[~ib_mask] = np.nan
lat[~ib_mask] = np.nan

lon2[~ib_mask2] = np.nan
lat2[~ib_mask2] = np.nan
#

# PLOTTING
plt.close('all')
matplotlib.use('TkAgg')
pfun.start_plot(figsize=(16,10))
fig = plt.figure()

# MAP
# set domain limits
ex = np.zeros(4)
if False:
    smlat = [latp.min(), np.nanmin(lat)-0.2, latp2.min(), np.nanmin(lat2)-0.2]
    lglat = [latp.max(), np.nanmax(lat)-0.2, latp2.max(), np.nanmax(lat2)-0.2]
    smlon = [lonp.min(), np.nanmin(lon)-0.2, lonp2.min(), np.nanmin(lon2)-0.2]
    lglon = [lonp.max(), np.nanmax(lon)-0.2, lonp2.max(), np.nanmax(lon2)-0.2]
    aa = [smlon.min(), lglon.max(), smlat.min(), smlon.max()]
else:
    # automatically plot region of particles, with padding
    pad = .02
    aa = [np.nanmin(lon) - pad, np.nanmax(lon) + pad,
    np.nanmin(lat) - pad, np.nanmax(lat) + pad]


ax = fig.add_subplot(121)
zm = -np.ma.masked_where(maskr==0, hh)
plt.pcolormesh(lonp, latp, zm, vmin=-100, vmax=0,
    cmap='terrain', alpha=.25)
pfun.add_coast(ax)
ax.axis(aa)
pfun.dar(ax)
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
ax.set_title('Fall cruise: 15-day release')
# add the tracks (packed [time, particle])
# regular spaghetti plots
# ax.plot(lon, lat, '-k', linewidth=.2)
stat_nm = ['PS5', 'PS6', 'PS7', 'PS9', 'PS8', 'PS1', 'PS2', 'PS3', 'PS4']
stat_num = [5, 6, 7, 9, 8, 1, 2, 3, 4]
stat_lat = [47.6864,  47.6, 47.3937, 47.2828, 47.287, 47.8839, 47.925, 47.9835, 48.0024]
stat_lon = [-122.423,  -122.365, -122.3601, -122.4437, -122.5387,  -122.3675, -122.4685, -122.6201, -122.6618]
atey, = ax.plot(lon2[-1,:], lat2[-1,:], 'om', alpha=.5, markersize=4, label = 'No Sinking')
ate, = ax.plot(lon[-1,:], lat[-1,:], 'oc', alpha=.3, markersize=4, label = 'Sink 8 m/day')
start, = ax.plot(lon[0,:], lat[0,:], 'b+', alpha=.05, markersize=5)

stations = ax.plot(stat_lon, stat_lat, 'or', alpha=1, markersize=4, markeredgecolor = 'k', label = 'Station location')
for i, txt in enumerate(stat_num):
    ax.annotate(txt, (stat_lon[i], stat_lat[i]), textcoords="offset points", # how to position the text
    xytext=(0,10), # distance from text to points (x,y)
    ha='center')
handles, labels = ax.get_legend_handles_labels()
proxy1, = ax.plot([0], [0], 'b+', alpha = 1, markersize = 5, label = 'Release location')
proxy2, = ax.plot([0], [0], 'or', alpha = 1, markersize = 4, markeredgecolor = 'k', label = 'Sampling stations')
proxy4, = ax.plot([0], [0], 'oc', alpha = 1, markersize = 4, label = '8 m/day sinking')
proxy3, = ax.plot([0], [0], 'om', alpha = 1, markersize = 4, label = 'No Sinking')
labelz = ('Release location', 'Sampling stations', '8 m/day sinking', 'No Sinking')
secnleg = ax.legend(handles = [proxy1, proxy2, proxy4, proxy3], labels = labelz, loc = 'lower left')
ay = plt.gca().add_artist(secnleg)
#ax.legend(handles, labels, loc = 'upper right')
#firstleg = ax.legend((handles, proxy), (labels, 'Release location'), bbox_to_anchor=(0.65, 0.87), loc = 'center')

# time series
td = (ot_vec - ot_vec[0])/86400
tv_list = ['z', 'salt', 'temp', 'oxygen']
tv_list2 = ['Depth (m)', 'Salt (PSU)','Temperature (Â°C)', 'Oxygen (mg/L)']
#tv_list = ['u', 'v', 'lon', 'lat']
ntv = len(tv_list)
for ii in range(ntv):
    tv = tv_list[ii]
    lbl = tv_list2[ii]
    NC = 2
    ax = fig.add_subplot(ntv,NC, (ii+1)*NC)
    v = dsr[tv].values[:,::step]
    v2 = dsr2[tv].values[:,::step2]
    v[~ib_mask] = np.nan
    v2[~ib_mask2] = np.nan
    ax.plot(td, v2, lw=.5, color ='magenta', alpha = .3, label = 'Sink 80 m/day')
    ax.plot(td, v, lw=.5, color = 'cyan', linestyle ='dashed', alpha = .1, label = 'Sink 8 m/day')
    ax.text(.05, .05, lbl, fontweight='bold', transform=ax.transAxes)
    if ii == 0:
        handle1, = ax.plot([0], [0], lw=.5, color = 'magenta', linestyle = 'dashed', alpha = 0.9)
        handle2, = ax.plot([0], [0], lw=.5, color = 'cyan', alpha = 1)
        ax.legend(handles = [handle2, handle1], labels = ('No Sinking', '8 m/day sinking'), bbox_to_anchor=(0., 1.02, 1., .102), loc='lower left', ncol=2, mode="expand", borderaxespad=0.)
    if ii == ntv-1:
        ax.set_xlabel('Time (days)')
plt.savefig('fall_fifteenday_no8.png')
plt.show()
pfun.end_plot()

dsr.close()
dsg.close()
